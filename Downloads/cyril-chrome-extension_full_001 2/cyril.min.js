!(function () {
  function c(a, b) {
    return a.classList
      ? a.classList.contains(b)
      : new RegExp("\\b" + b + "\\b").test(a.className);
  }
  function d(a, b, c) {
    a.attachEvent ? a.attachEvent("on" + b, c) : a.addEventListener(b, c);
  }
  function f(a, b) {
    c(a, b) || a.classList.add(b);
  }
  function g(a, b) {
    c(a, b) && a.classList.remove(b);
  }
  function h(a, b, e, f) {
    d(f || document, b, function (b) {
      for (var d, f = b.target || b.srcElement; f && !(d = c(f, a)); )
        f = f.parentElement;
      d && e.call(f, b);
    });
  }
  function i(a) {
    return document.getElementsByClassName(a);
  }
  var a;
  (a = a || {}), (a.tmpText = "");
  var b = chrome.runtime.connect({ name: "cyrillic_open_port" });
  b.onMessage.addListener(function (b) {
    if (b.searchResults) {
      var c = b.searchResults;
      j.suggests_results(c);
    } else
      b.savedFullText && a.textArea && (a.textArea.value = b.savedFullText);
  }),
    b.postMessage({ getFullText: "get" });
  var j = {};
  (j.options = {
    minChars: 3,
    offsetLeft: -10,
    offsetTop: 15,
    relativeOffset: 0,
    menuClass: "",
    className: "autocomplete-suggestions",
    enabled: !0,
    list_group: "list-group",
    list_group_item: "list-group-item",
  }),
    (j.suggests_results = function (b) {
      if ((j.suggestions.renderItem([]), b.length > 0)) {
        var c = window.getCaretCoordinates(
          a.textArea,
          a.textAreaContainer,
          a.textArea.selectionEnd,
        );
        j.suggestions.getDisplayStatus()
          ? j.suggestions.renderItem(b)
          : (j.suggestions.show(),
            j.suggestions.update(c.left, c.top),
            j.suggestions.renderItem(b));
      } else j.suggestions.hide();
    }),
    (j.suggestions = {
      container: {},
      isDisplayed: !0,
      create: function () {
        (this.container = document.createElement("div")),
          (this.container.className = j.options.className.concat(
            j.options.menuClass,
          )),
          (this.container.style.display = "inline-block"),
          a.textAreaContainer.appendChild(this.container);
      },
      update: function (a, b) {
        (this.container.style.position = "relative"),
          (this.container.style.left = a + j.options.offsetLeft + "px");
        var c = b + j.options.offsetTop - j.options.relativeOffset;
        this.container.style.top = c < 0 ? c + "px" : "0px";
      },
      getListItem: function (a, b) {
        return (
          '<a href="#" class="' +
          j.options.list_group_item +
          b +
          '">' +
          a +
          "</a>"
        );
      },
      renderItem: function (a) {
        for (
          var b = '<ul class="' + j.options.list_group + '">',
            c = "</ul>",
            d = 0;
          d < a.length;
          d++
        )
          b =
            0 == d
              ? b.concat(this.getListItem(a[d], " selected"))
              : b.concat(this.getListItem(a[d], ""));
        this.container.innerHTML = b.concat(c);
      },
      hide: function () {
        (this.container.style.display = "none"), (this.isDisplayed = !1);
      },
      show: function () {
        (this.container.style.display = "block"), (this.isDisplayed = !0);
      },
      getDisplayStatus: function () {
        return this.isDisplayed;
      },
      getSelectedWord: function () {
        for (var a = i(j.options.list_group_item), b = 0; b < a.length; b++)
          if (c(a[b], "selected")) {
            var d = a[b].innerText;
            return d;
          }
      },
      setUpArrow: function () {
        for (var a = i(j.options.list_group_item), b = 0; b < a.length; b++)
          if (c(a[b], "selected")) {
            a[b].innerText;
            g(a[b], "selected"),
              0 != b ? f(a[b - 1], "selected") : f(a[a.length - 1], "selected");
            break;
          }
      },
      setDownArrow: function () {
        for (var a = i(j.options.list_group_item), b = 0; b < a.length; b++)
          if (c(a[b], "selected")) {
            a[b].innerText;
            g(a[b], "selected"),
              b != a.length - 1 ? f(a[b + 1], "selected") : f(a[0], "selected");
            break;
          }
      },
      init: function () {
        h(
          "list-group-item",
          "mousedown",
          function (b) {
            var c = this.innerText,
              d = a.text.getLastWord();
            (c = c.substr(d.length).concat(" ")),
              a.text.insertText(c),
              j.suggestions.hide();
          },
          this.container,
        );
      },
    });
  var k = function (a) {
    (this.queue = []),
      (this.size = a),
      (this.position = 0),
      (this.editable = !0);
  };
  (k.prototype._trimHead = function () {
    this.queue.length <= this.size ||
      (this.queue = this.queue.splice(
        this.queue.length - this.size,
        this.queue.length,
      ));
  }),
    (k.prototype.push = function (a) {
      this.queue.push(a), this._trimHead();
    }),
    (k.prototype.getSize = function () {
      return this.queue.length;
    }),
    (k.prototype.get = function (a) {
      a < this.queue.length - 1 && this.queue[a];
    }),
    (k.prototype.clear = function () {
      this.queue = [];
    }),
    (k.prototype.toString = function () {
      for (var a = "", b = 0; b < this.queue.length; b++)
        a = a.concat(this.queue[b]);
      return a;
    }),
    (k.prototype.toArray = function () {
      return this.queue;
    }),
    (k.prototype.setEditable = function (a) {
      this.editable = a;
    }),
    (k.prototype.isEditable = function () {
      return this.editable;
    }),
    ($id = function (a) {
      return document.getElementById(a);
    }),
    (a.getCharCode = function (a) {
      var b;
      return (
        void 0 !== a
          ? 0 == (b = a.keyCode) && (b = a.which)
          : a && (b = a.which),
        String.fromCharCode(b)
      );
    }),
    (a.isCyrillic = function (b) {
      return null != a.characters[b];
    }),
    (a.options = {
      textAreaId: "cyrillic-input-area",
      textAreaContainerId: "cyrillic-input-area-container",
      textAreaWidth: 150,
      inputMode: "On",
      fontSize: 14,
      lang: "Монгол",
    }),
    (a.text = {
      left: "",
      right: "",
      insert: "",
      cursor: 0,
      setInput: function () {
        var b = this.left.concat(this.insert).concat(this.right);
        a.textArea.value = b;
      },
      getText: function () {
        (this.cursor = a.textArea.selectionStart),
          (this.left = a.textArea.value.substr(0, a.text.cursor)),
          (this.right = a.textArea.value.substr(a.textArea.selectionEnd));
      },
      setCursor: function (b) {
        var c = b || 0;
        a.textArea.setSelectionRange(this.cursor + c + 1, this.cursor + c + 1);
      },
      getLastWord: function () {
        if (this.left.length > 0) {
          for (var b = this.left.length, c = 0, d = b - 1; d >= 0; d--)
            if (this.left[d].match(/^\s*$/g)) {
              c = d + 1;
              break;
            }
          return this.left.substr(c, b).concat(this.insert);
        }
        return this.insert;
      },
      insertText: function (b) {
        a.text.getText(),
          (a.text.insert = b),
          a.text.setInput(),
          a.text.setCursor(b.length);
      },
      saveBackgroundText: function (c) {
        if (c) b.postMessage({ fullText: c });
        else {
          var c = a.textArea.value;
          b.postMessage({ fullText: c });
        }
      },
    }),
    (a.text.handlers = {
      textHandler: function () {
        var b = a.engToMon(a.queue);
        a.text.getText(),
          a.queue.getSize() == b.length && 1 == b.length
            ? (a.text.insert = b)
            : a.queue.getSize() == b.length && 2 == b.length
              ? (a.text.insert = b[1])
              : 2 == a.queue.getSize() &&
                1 == b.length &&
                ((a.text.left = a.text.left.substr(0, a.text.left.length - 1)),
                (a.text.cursor -= 1),
                (a.text.insert = b)),
          a.text.setInput(),
          a.text.setCursor();
      },
      keyPressHandler: function (c) {
        if (a.options.inputMode) {
          var d = a.getCharCode(c);
          if (a.isCyrillic(d)) {
            c.preventDefault(), a.queue.push(d), a.text.handlers.textHandler();
            var e = a.text.getLastWord();
            j.options.enabled &&
              e.length >= j.options.minChars &&
              b.postMessage({ searchWord: e });
          } else a.queue.setEditable(!0), a.queue.clear(), j.suggestions.hide();
        }
      },
      keyDownHandler: function (b) {
        var c;
        if (
          (void 0 !== b
            ? 0 == (c = b.keyCode) && (c = b.which)
            : b && (c = b.which),
          (9 == c || 13 == c) && j.suggestions.getDisplayStatus())
        ) {
          a.queue.setEditable(!0), a.queue.clear();
          var d = j.suggestions.getSelectedWord(),
            e = a.text.getLastWord();
          (d = d.substr(e.length).concat(" ")),
            a.text.insertText(d),
            j.suggestions.hide(),
            b.preventDefault();
        }
        b.altKey &&
          b.ctrlKey &&
          (j.suggestions.hide(),
          (a.options.inputMode = !a.options.inputMode),
          "eng" == a.menu.lang.value
            ? (a.menu.lang.value = "mon")
            : (a.menu.lang.value = "eng"),
          a.queue.setEditable(!0),
          a.queue.clear()),
          (8 != c && 45 != c && 46 != c && 32 != c) ||
            (j.suggestions.hide(), a.queue.setEditable(!0), a.queue.clear()),
          38 == c && j.suggestions.setUpArrow(),
          40 == c && j.suggestions.setDownArrow(),
          (37 != c && 39 != c) ||
            (a.queue.setEditable(!0), a.queue.clear(), j.suggestions.hide());
      },
      keyUpHandler: function (b) {
        var c;
        void 0 !== b
          ? 0 == (c = b.keyCode) && (c = b.which)
          : b && (c = b.which),
          c > 46 && c < 91 && a.text.saveBackgroundText();
      },
      focusHandler: function (a) {},
    }),
    (a.menu = {
      onOff: $id("selector-on-off"),
      lang: $id("selector-language"),
      font: $id("selector-font-size"),
      tooltipBtn: $id("selector-tooltip"),
      tooltip: $id("container-tooltip"),
      btnTable: $id("selector-table"),
      btnEraser: $id("selector-eraser"),
      table: $id("container-table"),
    }),
    (a.menu.handlers = {
      toggleTable: function () {
        c(a.menu.table, "hidden")
          ? g(a.menu.table, "hidden")
          : f(a.menu.table, "hidden");
      },
      toggleTooltip: function () {
        c(a.menu.tooltip, "hidden")
          ? g(a.menu.tooltip, "hidden")
          : f(a.menu.tooltip, "hidden");
      },
      onOffHandler: function (b) {
        j.suggestions.hide(),
          "On" == a.menu.onOff.options[a.menu.onOff.selectedIndex].text
            ? (j.options.enabled = !0)
            : (j.options.enabled = !1);
      },
      fontHandler: function (b) {
        j.suggestions.hide(),
          (a.options.fontSize = parseInt(
            a.menu.font.options[a.menu.font.selectedIndex].text,
          )),
          (a.textArea.style.fontSize = a.options.fontSize),
          (j.options.offsetTop = a.options.fontSize);
      },
      langHandler: function (b) {
        j.suggestions.hide(),
          "English" == a.menu.lang.options[a.menu.lang.selectedIndex].text
            ? (a.options.inputMode = !1)
            : (a.options.inputMode = !0),
          (a.options.lang =
            a.menu.lang.options[a.menu.lang.selectedIndex].text);
      },
      eraseTextArea: function (b) {
        (a.textArea.value = ""), a.text.saveBackgroundText("clear");
      },
    }),
    (a.engToMon = function (b) {
      var c = a.Eng_to_Mon[b.toString()];
      if (null != c) return 2 == b.getSize() && b.setEditable(!1), c;
      var d = b.toArray();
      monChars = [];
      for (var e = 0; e < d.length; e++)
        (c = a.Eng_to_Mon[d[e]]),
          null != c ? monChars.push(c) : monChars.push(d[e]);
      return monChars.join("");
    }),
    (a.setMenuOptions = function () {
      "English" == a.menu.onOff.options[a.menu.onOff.selectedIndex].text
        ? (a.options.inputMode = !1)
        : (a.options.inputMode = !0),
        (a.options.fontSize = parseInt(
          a.menu.font.options[a.menu.font.selectedIndex].text,
        )),
        (a.options.lang = a.menu.lang.options[a.menu.lang.selectedIndex].text);
    }),
    (a.setMenuHandlers = function () {
      d(a.menu.onOff, "change", a.menu.handlers.onOffHandler),
        d(a.menu.font, "change", a.menu.handlers.fontHandler),
        d(a.menu.lang, "change", a.menu.handlers.langHandler),
        d(a.menu.tooltipBtn, "click", a.menu.handlers.toggleTooltip),
        d(a.menu.btnTable, "click", a.menu.handlers.toggleTable),
        d(a.menu.btnEraser, "click", a.menu.handlers.eraseTextArea);
    }),
    (a.init = function () {
      (a.textArea = $id(a.options.textAreaId)),
        (a.textArea.style.height = a.options.textAreaWidth + "px"),
        (j.options.relativeOffset = a.options.textAreaWidth),
        (a.textAreaContainer = $id(a.options.textAreaContainerId)),
        d(a.textArea, "keypress", a.text.handlers.keyPressHandler),
        d(a.textArea, "keydown", a.text.handlers.keyDownHandler),
        d(a.textArea, "keyup", a.text.handlers.keyUpHandler),
        d(a.textArea, "focus", a.text.handlers.focusHandler),
        a.setMenuOptions(),
        a.setMenuHandlers(),
        j.suggestions.create(),
        j.suggestions.init(),
        (a.queue = new k(2));
    }),
    (a.characters = {
      a: "а",
      b: "б",
      v: "в",
      g: "г",
      d: "д",
      j: "ж",
      z: "з",
      i: "и",
      k: "к",
      l: "л",
      m: "м",
      n: "н",
      o: "о",
      q: "ө",
      p: "п",
      r: "р",
      s: "с",
      t: "т",
      u: "у",
      w: "ү",
      f: "ф",
      h: "х",
      c: "ц",
      x: "щ",
      '"': "ъ",
      y: "ы",
      "'": "ь",
      e: "э",
      A: "А",
      B: "Б",
      V: "В",
      G: "Г",
      D: "Д",
      J: "Ж",
      Z: "З",
      I: "И",
      K: "К",
      L: "Л",
      M: "М",
      N: "Н",
      O: "О",
      Q: "Ө",
      P: "П",
      R: "Р",
      S: "С",
      T: "Т",
      U: "У",
      W: "Ү",
      F: "Ф",
      H: "Х",
      C: "Ц",
      X: "Щ",
      Y: "Ы",
      E: "Э",
    }),
    (a.Eng_to_Mon = {
      ai: "ай",
      ei: "эй",
      ii: "ий",
      oi: "ой",
      ui: "уй",
      wi: "үй",
      qi: "өй",
      a: "а",
      b: "б",
      v: "в",
      g: "г",
      d: "д",
      ye: "е",
      yo: "ё",
      j: "ж",
      z: "з",
      i: "и",
      k: "к",
      l: "л",
      m: "м",
      n: "н",
      o: "о",
      q: "ө",
      p: "п",
      r: "р",
      s: "с",
      t: "т",
      u: "у",
      w: "ү",
      f: "ф",
      h: "х",
      c: "ц",
      ch: "ч",
      sh: "ш",
      x: "щ",
      '"': "ъ",
      y: "ы",
      "'": "ь",
      e: "э",
      yu: "ю",
      ya: "я",
      " ": " ",
      A: "А",
      B: "Б",
      V: "В",
      G: "Г",
      D: "Д",
      J: "Ж",
      Z: "З",
      I: "И",
      K: "К",
      L: "Л",
      M: "М",
      N: "Н",
      O: "О",
      Q: "Ө",
      P: "П",
      R: "Р",
      S: "С",
      T: "Т",
      U: "У",
      W: "Ү",
      F: "Ф",
      H: "Х",
      C: "Ц",
      X: "Щ",
      Y: "Ы",
      E: "Э",
      Yu: "Ю",
      Ya: "Я",
      Ai: "Ай",
      Ei: "Эй",
      Ii: "Ий",
      Oi: "Ой",
      Ui: "Уй",
      Wi: "Үй",
      Qi: "Өй",
      Ye: "Е",
      Yo: "Ё",
      Ch: "Ч",
      Sh: "Ш",
      YU: "Ю",
      YA: "Я",
      II: "Ий",
      AI: "АЙ",
      EI: "ЭЙ",
      OI: "ОЙ",
      UI: "УЙ",
      WI: "ҮЙ",
      QI: "ӨЙ",
      YE: "Е",
      YO: "Ё",
      CH: "Ч",
      SH: "Ш",
      '""': "Ъ",
      "''": "Ь",
    }),
    a.init();
})();
